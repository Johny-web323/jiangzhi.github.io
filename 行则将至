<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>古风文章分享</title>
    <style>
        @font-face {
            font-family: 'Xiaozhuan';
            src: url('https://fonts.gstatic.com/s/simkai/v10/7Au-p_0qiz-afTzGLQ.woff2');
        }

        @font-face {
            font-family: 'Xingkai';
            src: url('https://fonts.gstatic.com/s/maobi/v14/7Au-p_0qiz-afTzGLQ.woff2'); /* 替换为行楷字体URL */
        }

        body {
            font-family: SimSun, sans-serif;
            font-size: 14px;
            margin: 0;
            padding: 0;
            background-image: url('https://your-background-pattern-url.jpg');
            background-repeat: repeat;
            position: relative;
        }

        /* 星星闪动效果 */
        .star {
            position: absolute;
            width: 2px;
            height: 2px;
            background-color: white;
            border-radius: 50%;
            animation: twinkle 2s infinite;
        }

        @keyframes twinkle {
            0% {
                opacity: 1;
            }
            50% {
                opacity: 0.2;
            }
            100% {
                opacity: 1;
            }
        }

        header {
            background-color: skyblue;
            color: white;
            text-align: center;
            padding: 1em;
            font-family: 'Xiaozhuan', SimSun, sans-serif;
            border: 20px solid transparent;
            border-image: url('https://your-border-pattern-url.jpg') 30 round;
        }

        header h1 {
            font-size: 72px; /* 标题字号改为72px */
            font-weight: bold; /* 加粗 */
            margin: 0; /* 去掉默认的外边距 */
        }

        /* 新增竖排对称文本样式 */
        .vertical-text {
            position: absolute;
            top: 20px; /* 往上移动一些 */
            display: flex;
            flex-direction: column;
            justify-content: flex-start; /* 靠上对齐 */
            align-items: center;
            font-family: 'Xingkai', cursive;
            font-size: 72px; /* 调整字号为72px */
            writing-mode: vertical-rl; /* 竖排文字 */
            text-orientation: upright; /* 文字方向为正 */
            pointer-events: none; /* 防止干扰点击 */
            line-height: 22pt; /* 设置间距为22磅 */
        }

        .vertical-text.left {
            left: 20px; /* 左侧竖排字往右靠近编辑框 */
        }

        .vertical-text.right {
            right: 20px; /* 右侧竖排字往左靠近编辑框 */
        }

        main {
            padding: 2em;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative; /* 确保竖排文本相对main定位 */
        }

        .column {
            margin-bottom: 2em;
            border: 1px solid #ccc;
            padding: 1em;
            background-color: #fffaf0;
            background-image: url('https://www.transparenttextures.com/patterns/light-wool.png');
            background-repeat: repeat;
            width: 80%;
            box-sizing: border-box;
            position: relative;
        }

        /* 作为装饰元素 */
        .column::before {
            content: url('https://your-decoration-pattern-url.png');
            position: absolute;
            top: -10px;
            left: -10px;
            width: 30px;
            height: 30px;
        }

        .column h2 {
            margin-top: 0;
        }

        /* 调整输入框和按钮的高度 */
        .editor-controls {
            display: flex;
            align-items: center;
            gap: 10px; /* 控制元素之间的间距 */
            margin-bottom: 10px;
        }

        .editor-controls input[type="text"],
        .editor-controls select,
        .editor-controls input[type="color"],
        .editor-controls button {
            height: 40px; /* 统一高度 */
            box-sizing: border-box;
            font-size: 16px; /* 确保文字清晰可见 */
        }

        .editor-controls button {
            padding: 0 10px; /* 按钮内边距 */
        }

        .editor {
            width: 100%;
            min-height: 100px;
            margin-bottom: 10px;
            background-color: #fffaf0;
            background-image: url('https://www.transparenttextures.com/patterns/light-wool.png');
            background-repeat: repeat;
            border: 1px solid #ccc;
            padding: 5px;
            outline: none;
            line-height: 1.25;
            font-size: 16px; /* 确保文字清晰可见 */
        }

        .article {
            border: 1px solid #eee;
            padding: 10px;
            margin-bottom: 10px;
            background-color: #fffaf0;
            background-image: url('https://www.transparenttextures.com/patterns/light-wool.png');
            background-repeat: repeat;
            line-height: 1.25;
        }

        .article h3 {
            cursor: pointer;
        }

        .article-content {
            display: block;
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            body {
                background-size: contain;
            }

            .vertical-text {
                font-size: 48px; /* 在小屏幕上减小字号 */
            }

            .editor-controls {
                flex-wrap: wrap; /* 小屏幕上换行 */
            }

            header h1 {
                font-size: 48px; /* 小屏幕上标题字号减小 */
            }
        }

        /* 自定义加粗和下划线样式 */
        .custom-bold {
            background-color: white;
            border: 1px solid black;
            color: black;
        }

        .custom-underline {
            background-color: white;
            border: 1px solid black;
            color: black;
            text-decoration: underline;
        }
    </style>
</head>

<body>
    <!-- 随机生成星星 -->
    <script>
        for (let i = 0; i < 50; i++) {
            const star = document.createElement('div');
            star.classList.add('star');
            star.style.left = Math.random() * window.innerWidth + 'px';
            star.style.top = Math.random() * window.innerHeight + 'px';
            document.body.appendChild(star);
        }
    </script>
    <header>
        <h1>道阻且长 行则将至</h1>
    </header>
    <main>
        <!-- 新增竖排对称文本 -->
        <div class="vertical-text left">吾将上下而求索</div>
        <div class="vertical-text right">路漫漫其修远兮</div>

        <div class="column">
            <h2>教学随笔</h2>
            <div class="editor-controls">
                <input type="text" id="teachingEssayTitle" placeholder="请输入文章标题">
                <select id="teachingEssayFont" onchange="changeFont('teachingEssay')">
                    <option value="SimSun">宋体</option>
                    <option value="Microsoft YaHei">微软雅黑</option>
                    <option value="SimHei">黑体</option>
                    <option value="KaiTi">楷体</option>
                </select>
                <select id="teachingEssayFontSize" onchange="changeFontSizeSelect('teachingEssay')">
                    <option value="12px">12px</option>
                    <option value="14px" selected>14px</option>
                    <option value="16px">16px</option>
                    <option value="18px">18px</option>
                    <option value="20px">20px</option>
                </select>
                <input type="color" id="teachingEssayColor" onchange="changeTextColor('teachingEssay')">
                <button onclick="toggleBold('teachingEssay')">B</button>
                <button onclick="toggleUnderline('teachingEssay')">U̲</button>
                <button class="insert-image-button" onclick="insertImage('teachingEssay')">🖼️</button>
            </div>
            <div class="editor" id="teachingEssay" contenteditable="true"></div>
            <button onclick="saveContent('teachingEssay')">保存</button>
            <div id="teachingEssayDisplay"></div>
        </div>
        <div class="column">
            <h2>阅读感悟</h2>
            <div class="editor-controls">
                <input type="text" id="readingInsightTitle" placeholder="请输入文章标题">
                <select id="readingInsightFont" onchange="changeFont('readingInsight')">
                    <option value="SimSun">宋体</option>
                    <option value="Microsoft YaHei">微软雅黑</option>
                    <option value="SimHei">黑体</option>
                    <option value="KaiTi">楷体</option>
                </select>
                <select id="readingInsightFontSize" onchange="changeFontSizeSelect('readingInsight')">
                    <option value="12px">12px</option>
                    <option value="14px" selected>14px</option>
                    <option value="16px">16px</option>
                    <option value="18px">18px</option>
                    <option value="20px">20px</option>
                </select>
                <input type="color" id="readingInsightColor" onchange="changeTextColor('readingInsight')">
                <button onclick="toggleBold('readingInsight')">B</button>
                <button onclick="toggleUnderline('readingInsight')">U̲</button>
                <button class="insert-image-button" onclick="insertImage('readingInsight')">🖼️</button>
            </div>
            <div class="editor" id="readingInsight" contenteditable="true"></div>
            <button onclick="saveContent('readingInsight')">保存</button>
            <div id="readingInsightDisplay"></div>
        </div>
        <div class="column">
            <h2>学生文章</h2>
            <div class="editor-controls">
                <input type="text" id="studentArticleTitle" placeholder="请输入文章标题">
                <select id="studentArticleFont" onchange="changeFont('studentArticle')">
                    <option value="SimSun">宋体</option>
                    <option value="Microsoft YaHei">微软雅黑</option>
                    <option value="SimHei">黑体</option>
                    <option value="KaiTi">楷体</option>
                </select>
                <select id="studentArticleFontSize" onchange="changeFontSizeSelect('studentArticle')">
                    <option value="12px">12px</option>
                    <option value="14px" selected>14px</option>
                    <option value="16px">16px</option>
                    <option value="18px">18px</option>
                    <option value="20px">20px</option>
                </select>
                <input type="color" id="studentArticleColor" onchange="changeTextColor('studentArticle')">
                <button onclick="toggleBold('studentArticle')">B</button>
                <button onclick="toggleUnderline('studentArticle')">U̲</button>
                <button class="insert-image-button" onclick="insertImage('studentArticle')">🖼️</button>
            </div>
            <div class="editor" id="studentArticle" contenteditable="true"></div>
            <button onclick="saveContent('studentArticle')">保存</button>
            <div id="studentArticleDisplay"></div>
        </div>
    </main>
    <script>
        function saveContent(id) {
            const editor = document.getElementById(id);
            const titleInput = document.getElementById(id + 'Title');
            const title = titleInput.value;
            const display = document.getElementById(id + 'Display');
            const article = createArticle(title, editor.innerHTML, id);

            display.appendChild(article);
            editor.innerHTML = '';
            titleInput.value = '';

            // 保存文章到本地存储
            saveToLocalStorage(id, title, editor.innerHTML);
        }

        function createArticle(title, content, id) {
            const article = document.createElement('div');
            article.classList.add('article');
            if (title) {
                const titleElement = document.createElement('h3');
                titleElement.textContent = title;
                titleElement.addEventListener('click', function () {
                    const content = this.nextElementSibling;
                    content.style.display = content.style.display === 'none'? 'block' : 'none';
                });
                article.appendChild(titleElement);
            }
            const contentElement = document.createElement('div');
            contentElement.classList.add('article-content');
            contentElement.innerHTML = content;
            article.appendChild(contentElement);

            const editButton = document.createElement('button');
            editButton.textContent = '修改';
            const editor = document.getElementById(id);
            const titleInput = document.getElementById(id + 'Title');
            editButton.onclick = function () {
                editContent(article, editor, titleInput);
            };
            article.appendChild(editButton);

            const deleteButton = document.createElement('button');
            deleteButton.textContent = '删除';
            deleteButton.onclick = function () {
                deleteArticle(article, id);
            };
            article.appendChild(deleteButton);

            return article;
        }

        function editContent(article, editor, titleInput) {
            const titleElement = article.querySelector('h3');
            const title = titleElement? titleElement.textContent : '';
            const contentElement = article.querySelector('.article-content');
            editor.innerHTML = contentElement.innerHTML;
            titleInput.value = title;
            article.remove();

            // 更新本地存储
            updateLocalStorage(editor.id, title, contentElement.innerHTML);
        }

        function deleteArticle(article, id) {
            const titleElement = article.querySelector('h3');
            const title = titleElement? titleElement.textContent : '';
            const contentElement = article.querySelector('.article-content');
            const content = contentElement.innerHTML;

            // 从本地存储中删除文章
            const savedArticles = JSON.parse(localStorage.getItem('articles')) || {};
            if (savedArticles[id]) {
                const index = savedArticles[id].findIndex(item => item.title === title && item.content === content);
                if (index!== -1) {
                    savedArticles[id].splice(index, 1);
                    localStorage.setItem('articles', JSON.stringify(savedArticles));
                }
            }

            // 从页面中删除文章
            article.remove();
        }

        function toggleBold(id) {
            const editor = document.getElementById(id);
            const selection = document.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const span = document.createElement('span');
                span.classList.add('custom-bold');
                range.surroundContents(span);
            }
        }

        function toggleUnderline(id) {
            const editor = document.getElementById(id);
            const selection = document.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const span = document.createElement('span');
                span.classList.add('custom-underline');
                range.surroundContents(span);
            }
        }

        function insertImage(id) {
            const editor = document.getElementById(id);
            const imageUrl = prompt('请输入图片的 URL：');
            if (imageUrl) {
                const img = document.createElement('img');
                img.src = imageUrl;
                img.style.maxWidth = '100%';
                editor.appendChild(img);
            }
        }

        function changeFont(id) {
            const select = document.getElementById(id + 'Font');
            const editor = document.getElementById(id);
            const display = document.getElementById(id + 'Display');
            const selectedFont = select.value;
            setStyleForEditorAndArticles(editor, display, 'fontFamily', selectedFont);
        }

        function changeFontSizeSelect(id) {
            const select = document.getElementById(id + 'FontSize');
            const editor = document.getElementById(id);
            const display = document.getElementById(id + 'Display');
            const selectedFontSize = select.value;
            setStyleForEditorAndArticles(editor, display, 'fontSize', selectedFontSize);
        }

        function changeTextColor(id) {
            const colorPicker = document.getElementById(id + 'Color');
            const editor = document.getElementById(id);
            const selectedColor = colorPicker.value;
            const selection = document.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const span = document.createElement('span');
                span.style.color = selectedColor;
                range.surroundContents(span);
            }
        }

        function setStyleForEditorAndArticles(editor, display, styleProperty, value) {
            editor.style[styleProperty] = value;
            const articles = display.getElementsByClassName('article');
            for (let i = 0; i < articles.length; i++) {
                articles[i].style[styleProperty] = value;
            }
        }

        function saveToLocalStorage(id, title, content) {
            const savedArticles = JSON.parse(localStorage.getItem('articles')) || {};
            savedArticles[id] = savedArticles[id] || [];
            savedArticles[id].push({
                title: title,
                content: content
            });
            localStorage.setItem('articles', JSON.stringify(savedArticles));
        }

        function updateLocalStorage(id, title, content) {
            const savedArticles = JSON.parse(localStorage.getItem('articles')) || {};
            if (savedArticles[id]) {
                const index = savedArticles[id].findIndex(item => item.title === title && item.content === content);
                if (index!== -1) {
                    savedArticles[id].splice(index, 1);
                }
                savedArticles[id].push({
                    title: title,
                    content: content
                });
                localStorage.setItem('articles', JSON.stringify(savedArticles));
            }
        }

        // 页面加载时从本地存储中恢复文章
        window.onload = function () {
            const savedArticles = JSON.parse(localStorage.getItem('articles')) || {};
            for (const id in savedArticles) {
                const display = document.getElementById(id + 'Display');
                savedArticles[id].forEach(article => {
                    const articleElement = createArticle(article.title, article.content, id);
                    display.appendChild(articleElement);
                });
            }
        };
    </script>
</body>

</html>
